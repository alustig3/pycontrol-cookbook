{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to pyControl Tutorial","text":"<p>This tutorial will guide you through the basics of pyControl as well as some common \"recipes\"  or code snippets that are useful for common tasks.</p> <p>The official pyControl docs are a great resource for more detailed information on the framework and how to use it.</p>"},{"location":"cookbook/","title":"Cookbook","text":""},{"location":"cookbook/#1-timed-session","title":"1. Timed session","text":"<p>This automatically ends the session after 3 seconds</p> <pre><code>from pyControl.utility import *\nfrom devices import *\n\nstates = [\"state_a\"]\nevents = [\"session_over\"]\n\nv.session_duration = 3 * second\n\ninitial_state = \"state_a\"\n\n\ndef run_start():\n    set_timer(\"session_over\", v.session_duration)\n\n\ndef state_a(event):\n    if event == \"session_over\":\n        stop_framework()\n</code></pre>"},{"location":"cookbook/#2-blinking-light","title":"2. Blinking light","text":"<p>Demonstrates how to make multiple LEDs blink at different frequencies asynchronously. In this task, the red and green LEDs alternate: each blinks for 2 seconds before switching, while the blue LED blinks continuously at its own frequency.</p> <pre><code>from pyControl.utility import *\nfrom devices import *\n\n\n# hardware\nbreakout = Breakout_1_2()\nblue_LED = Digital_output(breakout.LED_blue)\nred_LED = Digital_output(breakout.LED_red)\ngreen_LED = Digital_output(breakout.LED_green)\n\n# states and events\nstates = [\"red_state\", \"green_state\"]\nevents = [\"toggle_red\", \"toggle_green\", \"toggle_blue\"]\n\n# variables\nv.red_frequency = 5 # Hz\nv.green_frequency = 10 # Hz\nv.blue_frequency = 3 # Hz\n\ninitial_state = \"red_state\"\n\n\ndef run_start():\n    set_timer(\"toggle_blue\", 1000.0 / v.blue_frequency)\n\n\ndef all_states(event):\n    if event == \"toggle_blue\":\n        blue_LED.toggle()\n        set_timer(\"toggle_blue\", 1000.0 / v.blue_frequency)\n\n\ndef red_state(event):\n    if event == \"entry\":\n        timed_goto_state(\"green_state\", 2 * second)\n        set_timer(\"toggle_red\", 1000.0 / v.red_frequency)\n    elif event == \"toggle_red\":\n        red_LED.toggle()\n        set_timer(\"toggle_red\", 1000.0 / v.red_frequency)\n    elif event == \"green_state\":\n        goto_state(\"green_state\")\n    elif event == \"exit\":\n        red_LED.off()\n\n\ndef green_state(event):\n    if event == \"entry\":\n        timed_goto_state(\"red_state\", 2 * second)\n        set_timer(\"toggle_green\", 1000.0 / v.green_frequency)\n    elif event == \"toggle_green\":\n        green_LED.toggle()\n        set_timer(\"toggle_green\", 1000.0 / v.green_frequency)\n    elif event == \"exit\":\n        green_LED.off()\n</code></pre>"},{"location":"cookbook/#3-button-hold-threshold","title":"3. Button hold threshold","text":"<p>Demonstrates how to detect when a button is held for a certain duration.</p> <pre><code>from pyControl.utility import *\nfrom devices import *\n\nbreakout = Breakout_1_2()\nbutton = Digital_input(\n    breakout.button,\n    pull=\"up\",\n    falling_event=\"button_press\",\n    rising_event=\"button_release\",\n)\n\nstates = [\"wait_for_hold\"]\nevents = [\"button_press\", \"button_release\", \"hold_complete\"]\n\nv.hold_time = 2 * second\n\ninitial_state = \"wait_for_hold\"\n\n\ndef wait_for_hold(event):\n    if event == \"button_press\":\n        set_timer(\"hold_complete\", v.hold_time)\n    elif event == \"button_release\":\n        ms_short = timer_remaining(\"hold_complete\")\n        disarm_timer(\"hold_complete\")\n        if ms_short &gt; 0:\n            print(\"Button not held long enough, {} ms remaining\".format(ms_short))\n    elif event == \"hold_complete\":\n        print(\"Button successfully held for {} ms\".format(v.hold_time))\n</code></pre>"},{"location":"tutorial/","title":"Tutorial","text":""},{"location":"tutorial/#1-bare-minimum","title":"1. Bare minimum","text":"<p>At a minimum, a task must define a list of states and events, and the initial state.</p> <p>This task doesn't do anything. When the task begins, it enters <code>state_1</code>, and then stays there forever.</p> <pre><code>states = [\"state_1\"] # a list of all of the states in the task\nevents = [] # a list of all of the events that the task will respond to\n\n# the state that the task will start out in\ninitial_state = \"state_1\" \n\n# the state function that will be called every time there is an event\ndef state_1(event): \n    pass\n</code></pre>"},{"location":"tutorial/#2-adding-a-device","title":"2. Adding a device","text":"<p>This task still doesn't do anything, but we've laid the groundwork for responding inputs and producing outputs using a device.</p> <pre><code>from devices import Breakout_1_2, Poke # (1)\n\n# create instances of devices\nbb = Breakout_1_2()  # breakout board (2)\ncenter_poke = Poke(bb.port_2, rising_event=\"center_in\") # (3)\n\nstates = [\"state_1\"]\nevents = [\"center_in\"] # (4)\n\ninitial_state = \"state_1\"\n\ndef state_1(event):\n    pass\n</code></pre> <ol> <li> <p>Device drivers make it easy to use hardware by abstracting away the lower level details of pin mappings and communication protocols, and providing a user-friendly interface to the hardware.</p> </li> <li> <p>This breakout board class maps the microcontroller GPIO pins to the breakout board's connectors (RJ45 and BNC) and LEDs. This makes writing code easier as you can simply pass in a port nuumber into a device class to access the hardware.</p> </li> <li> <p>We specify which port the device is plugged in to by passing in <code>bb.port_2</code> and give an event name <code>\"center_in\"</code> that will be emitted when the poke is detected.</p> </li> <li> <p>Any events that we plan on using should be added to the <code>events</code> list.</p> </li> </ol>"},{"location":"tutorial/#3-transition-states","title":"3. Transition states","text":"<p>At any given time, the framework is in one state and all events will be processed through that state's function of the same name.</p> <p>Here we define two states <code>state_1</code> and <code>state_2</code>.  We will respond to events coming from the nosepoke devices to transition between states.</p> <p>When the the state machine is in <code>state_1</code>, all it cares about is responding to a <code>center_in</code> event. Other events, should they occur, will still be logged to the data log, but only the <code>center_in</code> will be acted upon by the state machine while in <code>state_1</code>.</p> <p>When in <code>state_2</code>, all it cares about is responding to a <code>left_in</code> event.</p> <pre><code>from pyControl.utility import *\nfrom devices import Breakout_1_2, Poke\n\n# create instances of devices\nbb = Breakout_1_2()  # breakout board\ncenter_poke = Poke(bb.port_2, rising_event=\"center_in\")\nleft_poke = Poke(bb.port_3, rising_event=\"left_in\")\n\nstates = [\"state_1\", \"state_2\"]\nevents = [\"center_in\", \"left_in\"] \n\ninitial_state = \"state_1\"\n\n\ndef state_1(event):\n    if event == \"center_in\": # (1)\n        goto_state(\"state_2\") # (2)\n\n\ndef state_2(event):\n    if event == \"left_in\":\n        goto_state(\"state_1\")\n</code></pre> <ol> <li>We check if the event is <code>\"center_in\"</code> and if so, we transition to <code>state_2</code>.</li> <li>We use the <code>goto_state</code> function to transition to a new state.</li> </ol>"},{"location":"tutorial/#4-outputs","title":"4. Outputs","text":"<p>So far we have logged events and transitioned between states, but we still haven't altered the physical environment. Here we make use of a nosepoke device's <code>LED</code> attribute to turn on and off the LED when the state machine is in <code>state_1</code> and <code>state_2</code> respectively.</p> tasks/demo.py<pre><code>from pyControl.utility import *\nfrom devices import Breakout_1_2, Poke\n\n# create instances of devices\nbb = Breakout_1_2()  # breakout board\ncenter_poke = Poke(bb.port_2, rising_event=\"center_in\")\nleft_poke = Poke(bb.port_3, rising_event=\"left_in\")\n\nstates = [\"state_1\", \"state_2\"]\nevents = [\"center_in\", \"left_in\"]\n\ninitial_state = \"state_1\"\n\n\ndef state_1(event):\n    if event == \"entry\":\n        center_poke.LED.on()\n        left_poke.LED.off()\n    elif event == \"center_in\":\n        goto_state(\"state_2\")\n\n\ndef state_2(event):\n    if event == \"entry\":\n        center_poke.LED.off()\n        left_poke.LED.on()\n    elif event == \"left_in\":\n        goto_state(\"state_1\")\n</code></pre>"},{"location":"tutorial/#5-variables","title":"5. Variables","text":"<p>Variables can be used througout the task.</p> <p>Here we define two variables <code>poke_count___</code> and <code>poke_threshold</code>. When in <code>state_1</code> we increment the <code>poke_count___</code> each time the center nosepoke is entered. After 4 pokes, we reset the poke count and transition to <code>state_2</code>.</p> <p>All variables can be modified with the <code>controls</code> dialog.</p> <p>For \"private\" variables that the experimenter doesn't need to adjust, it's best practice to add 3 underscores at the end of the variable name. This keeps the controls dialog uncluttered by hiding  unneccesary private variable controls.</p> tasks/demo.py<pre><code>from pyControl.utility import *\nfrom devices import Breakout_1_2, Poke\n\n# create instances of devices\nbb = Breakout_1_2()  # breakout board\ncenter_poke = Poke(bb.port_2, rising_event=\"center_in\")\nleft_poke = Poke(bb.port_3, rising_event=\"left_in\")\n\nstates = [\"state_1\", \"state_2\"]\nevents = [\"center_in\", \"left_in\"]\n\ninitial_state = \"state_1\"\n\n\n# variables\nv.poke_count___ = 0\nv.poke_threshold = 4\n\n\ndef state_1(event):\n    if event == \"entry\":\n        center_poke.LED.on()\n        left_poke.LED.off()\n    elif event == \"center_in\":\n        v.poke_count___ += 1\n        if v.poke_count___ &gt;= v.poke_threshold:\n            v.poke_count___ = 0 # reset the poke count\n            goto_state(\"state_2\")\n\n\ndef state_2(event):\n    if event == \"entry\":\n        center_poke.LED.off()\n        left_poke.LED.on()\n    elif event == \"left_in\":\n        goto_state(\"state_1\")\n</code></pre>"},{"location":"tutorial/#6-timers","title":"6. Timers","text":"<p>Read more about time dependent behaviour here.</p> tasks/demo.py<pre><code>from pyControl.utility import *\nfrom devices import Breakout_1_2, Poke\n\n# create instances of devices\nbb = Breakout_1_2()  # breakout board\ncenter_poke = Poke(bb.port_2, rising_event=\"center_in\")\nleft_poke = Poke(bb.port_3, rising_event=\"left_in\", falling_event=\"left_out\")\n\nstates = [\"state_1\", \"state_2\"]\nevents = [\n    \"center_in\",\n    \"left_in\",\n    \"left_out\",\n    \"left_hold_complete\",\n]\n\ninitial_state = \"state_1\"\n\n\n# variables\nv.poke_count___ = 0\nv.poke_threshold = 5\nv.left_hold_duration = 1\nv.trial_number = 0\n\n\ndef state_1(event):\n    if event == \"entry\":\n        center_poke.LED.on()\n        left_poke.LED.off()\n    elif event == \"center_in\":\n        v.poke_count___ += 1\n        print(\"{} pokes\".format(v.poke_count___))\n        if v.poke_count___ &gt;= v.poke_threshold:\n            v.poke_count___ = 0\n            goto_state(\"state_2\")\n\n\ndef state_2(event):\n    if event == \"entry\":\n        center_poke.LED.off()\n        left_poke.LED.on()\n    elif event == \"left_in\":\n        set_timer(\"left_hold_complete\", v.left_hold_duration * second)\n    elif event == \"left_out\":\n        disarm_timer(\"left_hold_complete\")\n        print(\"not held long enough\")\n    elif event == \"left_hold_complete\":\n        v.trial_number += 1\n        print(\n            \"Trial:{}, Poke:{}, Hold:{}\".format(\n                v.trial_number, v.poke_count___, v.left_hold_duration\n            )\n        )\n        goto_state(\"state_1\")\n</code></pre>"},{"location":"tutorial/#7-analog-data","title":"7. Analog data","text":"tasks/demo.py<pre><code>from pyControl.utility import *\nfrom devices import Breakout_1_2, Poke, Rotary_encoder\n\n# create instances of devices\nbb = Breakout_1_2()  # breakout board\ncenter_poke = Poke(bb.port_2, rising_event=\"center_in\")\nleft_poke = Poke(bb.port_3, rising_event=\"left_in\", falling_event=\"left_out\")\nrunning_wheel = Rotary_encoder(\n    name=\"running_wheel\",\n    sampling_rate=40,\n    output=\"velocity\",\n)\n\nstates = [\"state_1\", \"state_2\"]\nevents = [\n    \"center_in\",\n    \"left_in\",\n    \"left_out\",\n    \"left_hold_complete\",\n]\n\ninitial_state = \"state_1\"\n\n\n# variables\nv.poke_count___ = 0\nv.poke_threshold = 5\nv.left_hold_duration = 1\nv.trial_number = 0\n\n\ndef state_1(event):\n    if event == \"entry\":\n        center_poke.LED.on()\n        left_poke.LED.off()\n    elif event == \"center_in\":\n        v.poke_count___ += 1\n\n        if v.poke_count___ &gt;= v.poke_threshold:\n            v.poke_count___ = 0\n            goto_state(\"state_2\")\n\n\ndef state_2(event):\n    if event == \"entry\":\n        center_poke.LED.off()\n        left_poke.LED.on()\n    elif event == \"left_in\":\n        set_timer(\"left_hold_complete\", v.left_hold_duration * second)\n    elif event == \"left_out\":\n        disarm_timer(\"left_hold_complete\")\n\n    elif event == \"left_hold_complete\":\n        v.trial_number += 1\n        print(\n            \"Trial:{}, Poke:{}, Hold:{}\".format(\n                v.trial_number, v.poke_count___, v.left_hold_duration\n            )\n        )\n        goto_state(\"state_1\")\n</code></pre>"},{"location":"tutorial/#8-analog-threshold","title":"8. Analog Threshold","text":"tasks/demo.py<pre><code>from pyControl.utility import *\nfrom devices import Breakout_1_2, Poke, Rotary_encoder\n\n# create instances of devices\nbb = Breakout_1_2()  # breakout board\ncenter_poke = Poke(bb.port_2, rising_event=\"center_in\")\nleft_poke = Poke(bb.port_3, rising_event=\"left_in\", falling_event=\"left_out\")\nrunning_wheel = Rotary_encoder(\n    name=\"running_wheel\",\n    sampling_rate=40,\n    output=\"velocity\",\n    threshold=1000,\n    rising_event=\"started_running\",\n    falling_event=\"stopped_running\",\n)\n\nstates = [\n    \"want_pokes\",\n    \"want_hold\",\n    \"bonus_state\",\n]\nevents = [\n    \"center_in\",\n    \"left_in\",\n    \"left_out\",\n    \"left_hold_complete\",\n    \"started_running\",\n    \"stopped_running\",\n    \"ran_enough\",\n]\n\ninitial_state = \"want_pokes\"\n\n\n# variables\nv.poke_count___ = 0\nv.poke_threshold = 5\nv.left_hold_duration = 1\nv.trial_number = 0\nv.ran_enough_duration = 3\n\n\ndef want_pokes(event):\n    if event == \"entry\":\n        center_poke.LED.on()\n        left_poke.LED.off()\n    elif event == \"center_in\":\n        v.poke_count___ += 1\n        if v.poke_count___ &gt;= v.poke_threshold:\n            v.poke_count___ = 0\n            goto_state(\"want_hold\")\n\n\ndef want_hold(event):\n    if event == \"entry\":\n        center_poke.LED.off()\n        left_poke.LED.on()\n    elif event == \"left_in\":\n        set_timer(\"left_hold_complete\", v.left_hold_duration * second)\n    elif event == \"left_out\":\n        disarm_timer(\"left_hold_complete\")\n    elif event == \"left_hold_complete\":\n        goto_state(\"want_pokes\")\n    elif event == \"started_running\":\n        set_timer(\"ran_enough\", v.ran_enough_duration * second)\n    elif event == \"stopped_running\":\n        disarm_timer(\"ran_enough\")\n    elif event == \"ran_enough\":\n        goto_state(\"bonus_state\")\n    elif event == \"exit\":\n        v.trial_number += 1\n        print(\n            \"Trial:{}, Poke:{}, Hold:{}\".format(\n                v.trial_number, v.poke_count___, v.left_hold_duration\n            )\n        )\n\n\ndef bonus_state(event):\n    if event == \"entry\":\n        print(\"!!!!!!!!!!!!!ExTrA BoNus ReWArD!!!!!!!!!!\")\n        timed_goto_state(\"want_pokes\", 2 * second)\n</code></pre>"},{"location":"tutorial/#9-timed-session","title":"9. Timed session","text":"tasks/demo.py<pre><code>from pyControl.utility import *\nfrom devices import Breakout_1_2, Poke, Rotary_encoder\n\n# create instances of devices\nbb = Breakout_1_2()  # breakout board\ncenter_poke = Poke(bb.port_2, rising_event=\"center_in\")\nleft_poke = Poke(bb.port_3, rising_event=\"left_in\", falling_event=\"left_out\")\nrunning_wheel = Rotary_encoder(\n    name=\"running_wheel\",\n    sampling_rate=40,\n    output=\"velocity\",\n    threshold=10,\n    rising_event=\"started_running\",\n    falling_event=\"stopped_running\",\n)\n\nstates = [\n    \"want_pokes\",\n    \"want_hold\",\n    \"bonus_state\",\n]\nevents = [\n    \"center_in\",\n    \"left_in\",\n    \"left_out\",\n    \"left_hold_complete\",\n    \"started_running\",\n    \"stopped_running\",\n    \"ran_enough\",\n    \"session_timer\",\n]\n\ninitial_state = \"want_pokes\"\n\n\n# variables\nv.poke_count___ = 0\nv.poke_threshold = 5\nv.left_hold_duration = 1\nv.trial_number = 0\nv.ran_enough_duration = 3\nv.session_duration = 10 \n\n\ndef run_start():\n    print(\"called at the start of the session\")\n    set_timer(\"session_timer\", v.session_duration * second)\n\n\ndef run_end():\n    print(\"called at the end of the session\")\n\n\ndef all_states(event):\n    # When 'session_timer' event occurs stop framework to end session.\n    if event == \"session_timer\":\n        stop_framework()\n\n\ndef want_pokes(event):\n    if event == \"entry\":\n        center_poke.LED.on()\n        left_poke.LED.off()\n    elif event == \"center_in\":\n        v.poke_count___ += 1\n        if v.poke_count___ &gt;= v.poke_threshold:\n            v.poke_count___ = 0\n            goto_state(\"want_hold\")\n\n\ndef want_hold(event):\n    if event == \"entry\":\n        center_poke.LED.off()\n        left_poke.LED.on()\n    elif event == \"left_in\":\n        set_timer(\"left_hold_complete\", v.left_hold_duration * second)\n    elif event == \"left_out\":\n        disarm_timer(\"left_hold_complete\")\n    elif event == \"left_hold_complete\":\n        goto_state(\"want_pokes\")\n    elif event == \"started_running\":\n        set_timer(\"ran_enough\", v.ran_enough_duration * second)\n    elif event == \"stopped_running\":\n        disarm_timer(\"ran_enough\")\n    elif event == \"ran_enough\":\n        goto_state(\"bonus_state\")\n    elif event == \"exit\":\n        v.trial_number += 1\n        print(\n            \"Trial:{}, Poke:{}, Hold:{}\".format(\n                v.trial_number, v.poke_count___, v.left_hold_duration\n            )\n        )\n\n\ndef bonus_state(event):\n    if event == \"entry\":\n        print(\"!!!!!!!!!!!!!ExTrA BoNus ReWArD!!!!!!!!!!\")\n        timed_goto_state(\"want_pokes\", 2 * second)\n</code></pre>"},{"location":"tutorial/#10-hardware-variables","title":"10. Hardware variables","text":"<p>Read more about hardware variables here </p> tasks/demo.py<pre><code>from pyControl.utility import *\nfrom devices import Breakout_1_2, Poke, Rotary_encoder\n\n# create instances of devices\nbb = Breakout_1_2()  # breakout board\ncenter_poke = Poke(bb.port_2, rising_event=\"center_in\")\nleft_poke = Poke(bb.port_3, rising_event=\"left_in\", falling_event=\"left_out\")\nrunning_wheel = Rotary_encoder(\n    name=\"running_wheel\",\n    sampling_rate=40,\n    output=\"velocity\",\n    threshold=10,\n    rising_event=\"started_running\",\n    falling_event=\"stopped_running\",\n)\n\nstates = [\n    \"want_pokes\",\n    \"want_hold\",\n    \"bonus_state\",\n]\nevents = [\n    \"center_in\",\n    \"left_in\",\n    \"left_out\",\n    \"left_hold_complete\",\n    \"started_running\",\n    \"stopped_running\",\n    \"ran_enough\",\n    \"session_timer\",\n]\n\ninitial_state = \"want_pokes\"\n\n\n# variables\nv.poke_count___ = 0\nv.poke_threshold = 5\nv.left_hold_duration = 1\nv.trial_number = 0\nv.ran_enough_duration = 3\nv.session_duration = 10\n\nv.hw_friction_factor = None\n\n\ndef run_start():\n    print(\"called at the start of the session\")\n    set_timer(\"session_timer\", v.session_duration * second)\n\n\ndef run_end():\n    print(\"called at the end of the session\")\n\n\ndef all_states(event):\n    # When 'session_timer' event occurs stop framework to end session.\n    if event == \"session_timer\":\n        stop_framework()\n\n\ndef want_pokes(event):\n    if event == \"entry\":\n        center_poke.LED.on()\n        left_poke.LED.off()\n    elif event == \"center_in\":\n        v.poke_count___ += 1\n        if v.poke_count___ &gt;= v.poke_threshold:\n            v.poke_count___ = 0\n            goto_state(\"want_hold\")\n\n\ndef want_hold(event):\n    if event == \"entry\":\n        center_poke.LED.off()\n        left_poke.LED.on()\n    elif event == \"left_in\":\n        set_timer(\"left_hold_complete\", v.left_hold_duration * second)\n    elif event == \"left_out\":\n        disarm_timer(\"left_hold_complete\")\n    elif event == \"left_hold_complete\":\n        goto_state(\"want_pokes\")\n    elif event == \"started_running\":\n        set_timer(\"ran_enough\", v.ran_enough_duration / v.hw_friction_factor * second)\n    elif event == \"stopped_running\":\n        disarm_timer(\"ran_enough\")\n    elif event == \"ran_enough\":\n        goto_state(\"bonus_state\")\n    elif event == \"exit\":\n        v.trial_number += 1\n        print(\n            \"Trial:{}, Poke:{}, Hold:{}, Run:{}\".format(\n                v.trial_number,\n                v.poke_count___,\n                v.left_hold_duration,\n                v.ran_enough_duration / v.hw_friction_factor,\n            )\n        )\n\n\ndef bonus_state(event):\n    if event == \"entry\":\n        print(\"!!!!!!!!!!!!!ExTrA BoNus ReWArD!!!!!!!!!!\")\n        timed_goto_state(\"want_pokes\", 2 * second)\n</code></pre>"},{"location":"tutorial/#11-custom-controls","title":"11. Custom controls","text":"tasks/demo.py<pre><code>from pyControl.utility import *\nfrom devices import Breakout_1_2, Poke, Rotary_encoder\n\n# create instances of devices\nbb = Breakout_1_2()  # breakout board\ncenter_poke = Poke(bb.port_2, rising_event=\"center_in\")\nleft_poke = Poke(bb.port_3, rising_event=\"left_in\", falling_event=\"left_out\")\nrunning_wheel = Rotary_encoder(\n    name=\"running_wheel\",\n    sampling_rate=40,\n    output=\"velocity\",\n    threshold=10,\n    rising_event=\"started_running\",\n    falling_event=\"stopped_running\",\n)\n\nstates = [\n    \"want_pokes\",\n    \"want_hold\",\n    \"bonus_state\",\n]\nevents = [\n    \"center_in\",\n    \"left_in\",\n    \"left_out\",\n    \"left_hold_complete\",\n    \"started_running\",\n    \"stopped_running\",\n    \"ran_enough\",\n    \"session_timer\",\n]\n\ninitial_state = \"want_pokes\"\n\n\n# variables\nv.poke_count______ = 0\nv.poke_threshold = 5\nv.left_hold_duration = 1\nv.trial_number___ = 0\nv.ran_enough_duration = 3\nv.session_duration = 10\n\nv.hw_friction_factor = None\nv.custom_controls_dialog = \"andys_controls_UI\"\n\n\ndef run_start():\n    print(\"called at the start of the session\")\n    set_timer(\"session_timer\", v.session_duration * second)\n\n\ndef run_end():\n    print(\"called at the end of the session\")\n\n\ndef all_states(event):\n    # When 'session_timer' event occurs stop framework to end session.\n    if event == \"session_timer\":\n        stop_framework()\n\n\ndef want_pokes(event):\n    if event == \"entry\":\n        center_poke.LED.on()\n        left_poke.LED.off()\n    elif event == \"center_in\":\n        v.poke_count______ += 1\n        if v.poke_count______ &gt;= v.poke_threshold:\n            v.poke_count______ = 0\n            goto_state(\"want_hold\")\n\n\ndef want_hold(event):\n    if event == \"entry\":\n        center_poke.LED.off()\n        left_poke.LED.on()\n    elif event == \"left_in\":\n        set_timer(\"left_hold_complete\", v.left_hold_duration * second)\n    elif event == \"left_out\":\n        disarm_timer(\"left_hold_complete\")\n    elif event == \"left_hold_complete\":\n        goto_state(\"want_pokes\")\n    elif event == \"started_running\":\n        set_timer(\"ran_enough\", v.ran_enough_duration / v.hw_friction_factor * second)\n    elif event == \"stopped_running\":\n        disarm_timer(\"ran_enough\")\n    elif event == \"ran_enough\":\n        goto_state(\"bonus_state\")\n    elif event == \"exit\":\n        v.trial_number___ += 1\n        print(\n            \"Trial:{}, Poke:{}, Hold:{}, Run:{}\".format(\n                v.trial_number,\n                v.poke_count___,\n                v.left_hold_duration,\n                v.ran_enough_duration / v.hw_friction_factor,\n            )\n        )\n\n\ndef bonus_state(event):\n    if event == \"entry\":\n        print(\"!!!!!!!!!!!!!ExTrA BoNus ReWArD!!!!!!!!!!\")\n        timed_goto_state(\"want_pokes\", 2 * second)\n</code></pre>"},{"location":"tutorial/#12-api","title":"12. API","text":"tasks/demo.py<pre><code>from pyControl.utility import *\nfrom devices import Breakout_1_2, Poke, Rotary_encoder\n\n# create instances of devices\nbb = Breakout_1_2()  # breakout board\ncenter_poke = Poke(bb.port_2, rising_event=\"center_in\")\nleft_poke = Poke(bb.port_3, rising_event=\"left_in\", falling_event=\"left_out\")\nrunning_wheel = Rotary_encoder(\n    name=\"running_wheel\",\n    sampling_rate=40,\n    output=\"velocity\",\n    threshold=10,\n    rising_event=\"started_running\",\n    falling_event=\"stopped_running\",\n)\n\nstates = [\n    \"want_pokes\",\n    \"want_hold\",\n    \"bonus_state\",\n]\nevents = [\n    \"center_in\",\n    \"left_in\",\n    \"left_out\",\n    \"left_hold_complete\",\n    \"started_running\",\n    \"stopped_running\",\n    \"ran_enough\",\n    \"session_timer\",\n]\n\ninitial_state = \"want_pokes\"\n\n\n# variables\nv.poke_count______ = 0\nv.poke_threshold = 5\nv.left_hold_duration = 1\nv.trial_number___ = 0\nv.ran_enough_duration = 3\nv.session_duration = 10\n\nv.hw_friction_factor = None\nv.custom_controls_dialog = \"andys_controls_UI\"\nv.api_class = \"Demo_api\"\n\n\ndef run_start():\n    print(\"called at the start of the session\")\n    set_timer(\"session_timer\", v.session_duration * second)\n\n\ndef run_end():\n    print(\"called at the end of the session\")\n\n\ndef all_states(event):\n    # When 'session_timer' event occurs stop framework to end session.\n    if event == \"session_timer\":\n        stop_framework()\n\n\ndef want_pokes(event):\n    if event == \"entry\":\n        center_poke.LED.on()\n        left_poke.LED.off()\n    elif event == \"center_in\":\n        v.poke_count______ += 1\n        if v.poke_count______ &gt;= v.poke_threshold:\n            v.poke_count______ = 0\n            goto_state(\"want_hold\")\n\n\ndef want_hold(event):\n    if event == \"entry\":\n        center_poke.LED.off()\n        left_poke.LED.on()\n    elif event == \"left_in\":\n        set_timer(\"left_hold_complete\", v.left_hold_duration * second)\n    elif event == \"left_out\":\n        disarm_timer(\"left_hold_complete\")\n    elif event == \"left_hold_complete\":\n        goto_state(\"want_pokes\")\n    elif event == \"started_running\":\n        set_timer(\"ran_enough\", v.ran_enough_duration / v.hw_friction_factor * second)\n    elif event == \"stopped_running\":\n        disarm_timer(\"ran_enough\")\n    elif event == \"ran_enough\":\n        goto_state(\"bonus_state\")\n    elif event == \"exit\":\n        v.trial_number___ += 1\n        print(\n            \"Trial:{}, Poke:{}, Hold:{}, Run:{}\".format(\n                v.trial_number,\n                v.poke_count___,\n                v.left_hold_duration,\n                v.ran_enough_duration / v.hw_friction_factor,\n            )\n        )\n\n\ndef bonus_state(event):\n    if event == \"entry\":\n        print(\"!!!!!!!!!!!!!ExTrA BoNus ReWArD!!!!!!!!!!\")\n        timed_goto_state(\"want_pokes\", 2 * second)\n</code></pre> api_classes/Demo_api.py<pre><code>from source.gui.api import Api\nfrom telegram import Bot\nimport asyncio\nimport threading\nimport matplotlib.pyplot as plt\n\n\nTOKEN = \"7527948084:AAHCVuQ7bKdvYIoEAb57dxyp0hqxa5dkt5o\"\nCHAT_ID = -4740996122\n\nplt.rcParams[\"toolbar\"] = \"None\"  # Disable Matplotlib figure toolbar.\nplt.rc(\"axes.spines\", top=False, right=False)  # Disable top and right axis spines.\nplt.switch_backend(\"Qt6Agg\")\n\n\nclass Telegram:\n    def __init__(self, token, chatID):\n        self.bot = Bot(token=token)\n        self.chat_id = chatID\n        self.loop = asyncio.new_event_loop()\n        self.thread = threading.Thread(target=self._run_event_loop, daemon=True)\n        self.thread.start()\n\n    def _run_event_loop(self):\n        asyncio.set_event_loop(self.loop)\n        self.loop.run_forever()\n\n    async def async_msg_send(self, msg):\n        async with self.bot:\n            await self.bot.send_message(\n                text=msg, chat_id=self.chat_id, parse_mode=\"HTML\"\n            )\n\n    def notify(self, *message_lines, wait_for_send=False):\n        msg = \"\\n\".join(message_lines)\n        future = asyncio.run_coroutine_threadsafe(self.async_msg_send(msg), self.loop)\n        if wait_for_send:\n            future.result()\n\n    def test(self):\n        self.notify(\"This is a test notification from pyControl settings\")\n\n    def stop(self):\n        self.loop.call_soon_threadsafe(self.loop.stop)\n        self.thread.join()\n\n\n# This class should be have the same name as the file and inherit the API class\n# look at source/gui/api.py to see what functions can be redefined and called\nclass Demo_api(Api):\n    def __init__(self):\n        self.off_count = 0\n        self.telegrammer = None\n\n        self.figure = plt.figure()\n\n    # this runs at the start of sessoin\n    def run_start(self):\n        self.ax = self.figure.add_subplot(111)\n        self.pokes = [\"left\", \"center\"]\n        self.pokes_count = [0, 0]\n        self.ax.bar(self.pokes, self.pokes_count)\n        plt.show(block=False)\n\n        if hasattr(self.board.data_logger, \"setup_ID\"):\n            self.telegrammer = Telegram(TOKEN, CHAT_ID)\n        else:\n            self.print_to_log(\"No setup ID found\")\n\n    # use this function\n    def process_data_user(self, data):\n        new_events = [new_event.name for new_event in data[\"events\"]]\n        for event in new_events:\n            if event == \"left_in\":\n                self.pokes_count[0] += 1\n            elif event == \"center_in\":\n                self.pokes_count[1] += 1\n\n        # Clear the current bars and redraw with updated counts\n        self.ax.clear()\n        self.ax.set_title(\"Poke Counts\")\n        self.ax.set_ylim((0, max(self.pokes_count) + 1))\n        self.ax.bar(self.pokes, self.pokes_count, color=[\"red\", \"blue\"])\n        self.figure.canvas.draw_idle()\n        self.figure.canvas.flush_events()\n\n    def run_stop(self):\n        self.print_to_log(\"\\nMessage from API at the end of the session\")\n        if self.telegrammer:\n            setup, subject = (\n                self.board.data_logger.setup_ID,\n                self.board.data_logger.subject_ID,\n            )\n            final_vars = self.board.get_variables()\n            session_duration = self.board.timestamp // 1000\n            self.telegrammer.notify(\n                \"Session complete!\",\n                f\"Subject {subject} in {setup}\",\n                f\"{session_duration // 3600:02d}h {(session_duration % 3600) // 60:02d}m {session_duration % 60:02d}s\",\n                f\"{final_vars['trial_number___']} trial{'s' if final_vars['trial_number___'] != 1 else ''} completed\",\n            )\n</code></pre>"}]}